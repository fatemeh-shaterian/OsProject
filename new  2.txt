package osproject;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
/**
 *
 * @author Fatemeh
 */
public class Main
{
    private static Integer numOfFrameInMem;
    private static Integer sizeOfProcess;
    private static Integer sizeOfPage;
    private static String replaceAlgo;
    private static Integer numOfTlbRow;
    private static ArrayList<op> operations = new ArrayList<op>();
    private static Integer numOfLogicalMemPage;
    private static int[] logicalMem;
    private static int[] physicalMem;
    private static TLB_S[] tlb;
    private static int[] tlb_counter;
    private static PT_S[] pt;
    private static int[] tagIndex;
    private static boolean [] isDirty;
    private static int counter = 0;
    private static Integer[] refrence;
    private static Integer[] refPointer = new Integer[1];
    private static PrintWriter pw;

   
    public static void main(String[] args) throws FileNotFoundException, IOException
    {
        makeRedy();
        System.out.println("----------------------------");
        inital();        
        if(replaceAlgo.equals("lru"))
        {
            System.out.println("here in lru replacement");            
            for (int i = 0;i<operations.size();i++)
            {
                System.out.println("# i = "+i);
                pw.println("# i = "+i);
                op request = operations.get(i);
                System.out.println("# page = " + request.page);
                pw.println("# page = " + request.page);
//protection
                if(!pageAddrProtection(numOfLogicalMemPage,request.page))
                {
                    System.out.println("-------------------------------------");
                    pw.println("-------------------------------------");
                    continue;
                }
                if(!pageOffsetProtection(sizeOfPage,request.offset))
                {
                    System.out.println("-------------------------------------");
                    pw.println("-------------------------------------");
                    continue;
                }
                int find = searchTLB(request.page);
//check
 System.out.println("###-------------------------------------");
                for (int j = 0;j<tlb.length;j++)
                {
                    System.out.println(tlb[j].logicalAddr + "   "+ tlb[j].physicalAddr+"    "+tlb_counter[j]);
                }
  System.out.println("###-------------------------------------");

                if(find!=-1)
                {
                    System.out.println("page found in TBL is in frame "+ find);
                    pw.println("page found in TBL is in frame "+ find);
                }
                else// search in pt and then refresh th tlb
                {
                        System.out.println("page not found in TBL search PT ");
                        pw.println("page not found in TBL search PT ");
                    if(pt[request.page].valid)
                    {
                        System.out.println("page is in physical mem");
                        pw.println("page is in physical mem");
                        tagIndex[pt[request.page].physicalAddr] = counter;
                        counter ++;
                        System.out.print("update tlb: ");
                        pw.print("update tlb: ");
                        updateTLB(request.page,pt[request.page].physicalAddr);
                    }
                    else
                    {
                        int freeFrameIndex = findFreeFrame();
                        if (freeFrameIndex!=-1)
                        {
                            // swup in that page
                            System.out.println("copy page "+ request.page + " from vitual to physical memory in "+ freeFrameIndex);
                            pw.println("copy page "+ request.page + " from vitual to physical memory in "+ freeFrameIndex);
                            physicalMem[freeFrameIndex] = 1;
                            System.out.println("update pt, row "+ request.page + ", validation is true");
                            pw.println("update pt, row "+ request.page + ", validation is true");
                            pt[request.page].valid = true;
                            System.out.println("update pt, row "+ request.page + ", frame is "+ freeFrameIndex);
                            pw.println("update pt, row "+ request.page + ", frame is "+ freeFrameIndex);
                            pt[request.page].physicalAddr = freeFrameIndex;
                            tagIndex[freeFrameIndex] = counter;
                            counter ++;
                            System.out.print("update tlb: ");
                            pw.print("update tlb: ");
                            updateTLB(request.page,pt[request.page].physicalAddr);
                        }
                        else
                        {
                            System.out.println("free frame not found, wait instruction, use LRU algorithm");
                            pw.println("free frame not found, wait instruction,use LRU algorithm");
                            freeFrameIndex = Algo.LRU(tagIndex);
                            System.out.println("condidate frame swap out is: "+ freeFrameIndex);
                            pw.println("condidate frame swap out is: "+ freeFrameIndex);
                            System.out.println("swap in requested page : "+ request.page);
                            pw.println("swap in requested page : "+ request.page);
                            System.out.println("update pt, row "+ request.page + ", validation is true");
                            pw.println("update pt, row "+ request.page + ", validation is true");
                            pt[request.page].valid = true;
                            System.out.println("update pt, row "+ request.page + ", frame is "+ freeFrameIndex);
                            pw.println("update pt, row "+ request.page + ", frame is "+ freeFrameIndex);
                            pt[request.page].physicalAddr = freeFrameIndex;
                            tagIndex[freeFrameIndex] = counter;
                            counter ++;
                            System.out.println("copy frame in logical mem if it is modified");
                            pw.println("copy frame in logical mem if it is modified");
                            //physicalMem[freeFrameIndex] = 0;
                            System.out.println("restart instruction");
                            pw.println("restart instruction");                            
                            updateTLB(request.page,pt[request.page].physicalAddr);                           
                            continue;
                        }
                    }
                }
                System.out.println("-------------------------------------");
                pw.println("-------------------------------------");
            }           
        }
        else if(replaceAlgo.equals("secondchanse"))
        {
            System.out.println("here in secondchanse replacement");
            pw.println("here in secondchanse replacement");
            for (int i = 0;i<operations.size();i++)
            {
                System.out.println("# i = "+i);
                pw.println("# i = "+i);
                op request = operations.get(i);
                System.out.println("# page = " + request.page);
                pw.println("# page = " + request.page);
                if(!pageAddrProtection(numOfLogicalMemPage,request.page))
                {
                    System.out.println("-------------------------------------");
                    pw.println("-------------------------------------");
                    continue;
                }
                if(!pageOffsetProtection(sizeOfPage,request.offset))
                {
                    pw.println("-------------------------------------");
                    System.out.println("-------------------------------------");
                    continue;
                }
                int find = searchTLB(request.page);
                if(find!=-1)
                {
                    System.out.println("page found in TBL is in frame "+ find);
                    pw.println("page found in TBL is in frame "+ find);
                }
                else// search in pt and then refresh th tlb
                {
                        System.out.println("page not found in TBL search PT ");
                        pw.println("page not found in TBL search PT ");

                    if(pt[request.page].valid)
                    {
                        System.out.println("page is in physical mem");
                        pw.println("page is in physical mem");
                        setRefrence(pt[request.page].physicalAddr,request.type);
                        System.out.print("update tlb: ");
                        pw.print("update tlb: ");
                        updateTLB(request.page,pt[request.page].physicalAddr);
                    }
                    else
                    {
                            int freeFrameIndex = findFreeFrame();
                            if (freeFrameIndex!=-1)
                            {
                                // swup in that page
                                System.out.println("copy page "+ request.page + " from vitual to physical memory in "+ freeFrameIndex);
                                pw.println("copy page "+ request.page + " from vitual to physical memory in "+ freeFrameIndex);
                                physicalMem[freeFrameIndex] = 1;
                                System.out.println("update pt, row "+ request.page + ", validation is true");
                                pw.println("update pt, row "+ request.page + ", validation is true");
                                pt[request.page].valid = true;
                                System.out.println("update pt, row "+ request.page + ", frame is "+ freeFrameIndex);
                                pw.println("update pt, row "+ request.page + ", frame is "+ freeFrameIndex);
                                pt[request.page].physicalAddr = freeFrameIndex;
                                setRefrence(pt[request.page].physicalAddr,request.type);
                                System.out.print("update tlb: ");
                                pw.print("update tlb: ");
                                updateTLB(request.page,pt[request.page].physicalAddr);
                            }
                            else
                            {
                                System.out.println("free frame not found, use LRU algorithm");
                                pw.println("free frame not found, use LRU algorithm");
                                System.out.println("#@"+refPointer[0]);
                                pw.println("#@"+refPointer[0]);
                                freeFrameIndex = Algo.secondChance(refPointer,refrence);
                                System.out.println("#@"+refPointer[0]);
                                pw.println("#@"+refPointer[0]);
                                
                                System.out.println("condidate frame swap out is: "+ freeFrameIndex);
                                pw.println("condidate frame swap out is: "+ freeFrameIndex);
                                tagIndex[freeFrameIndex] = counter;
                                counter ++;
                                System.out.println("copy frame in logical mem if it is modified");
                                pw.println("copy frame in logical mem if it is modified");
                                physicalMem[freeFrameIndex] = 0;
                                System.out.println("make frame free and restart instruction");
                                pw.println("make frame free and restart instruction");
                                i--;
                                System.out.print("update tlb: ");
                                pw.print("update tlb: ");
                                int index =updateTLB(request.page,pt[request.page].physicalAddr);
                                tlb_counter[index]--;
                                continue;
                            }
                    }
                }
                System.out.println("-------------------------------------");
                pw.println("-------------------------------------");
            }
        }
        pw.close();
    }

    private static int findFreeFrame()
    {
        for(int i = 0;i<physicalMem.length;i++)
            if(physicalMem[i] == 0)
                return i;
        return -1;
    }

    private static void inital()
    {
        numOfLogicalMemPage = sizeOfProcess/sizeOfPage;
        logicalMem = new int[numOfLogicalMemPage];
        pt = new PT_S[numOfLogicalMemPage];
        for(int i = 0;i<pt.length;i++)
        {
            pt[i] = new PT_S();
            pt[i].valid = false;
        }
        physicalMem = new int[numOfFrameInMem];
        for (int i = 0;i<numOfFrameInMem;i++)
        {
            physicalMem[i] = 0;
        }
        tagIndex = new int[physicalMem.length];
        for(int i = 0;i<tagIndex.length;i++)
            tagIndex[i] = -1;
        isDirty = new boolean[physicalMem.length];
        for(int i = 0;i<isDirty.length;i++)
            isDirty[i] = false ;
        tlb = new TLB_S[numOfTlbRow];
        for(int i = 0;i<tlb.length;i++)
        {
            tlb[i] = new TLB_S();
        }
        tlb_counter = new int[numOfTlbRow];
         for(int i = 0;i<tlb_counter.length;i++)
        {
            tlb_counter[i] = 0;
        }

        refrence = new Integer[physicalMem.length];
        for(int i = 0;i<refrence.length;i++)
            refrence[i] = 0;
        refPointer[0] = 0;
    }

     private static void makeRedy()throws FileNotFoundException, IOException
    {
         File inFile = new File("input.txt");
        BufferedReader br = new BufferedReader(new FileReader(inFile));
        pw = new PrintWriter("out.txt");
        String in = null;
        for (int i = 0;i<5;i++)
        {
            in = br.readLine();
            System.out.println(in);
            switch(i)
            {
                case 0:
                    numOfFrameInMem = Integer.parseInt(in);
                    break;
                case 1:
                    sizeOfProcess = Integer.parseInt(in);
                    break;
                case 2:
                    sizeOfPage = Integer.parseInt(in);
                    break;
                case 3:
                    replaceAlgo = in;
                    break;
                case 4:
                    numOfTlbRow = Integer.parseInt(in);
                    break;
            }
        }
         String opTemp[];
            while ((in = br.readLine()) != null)
            {
                opTemp = in.split(",");          
                operations.add(new op(Integer.parseInt(opTemp[0]), Integer.parseInt(opTemp[1]), opTemp[2]));
            }
    }

    private static boolean pageAddrProtection(Integer numOfLogicalMemPage, int page)
    {
        if (page>numOfLogicalMemPage)
        {
            System.out.println("ERROR: page address is not valid");
            pw.println("ERROR: page address is not valid");
            return false;
        }
        System.out.println("CORRECT: page address is valid");
        pw.println("CORRECT: page address is valid");
        return true;
    }

    private static boolean pageOffsetProtection(Integer sizeOfPage, int offset)
    {
         if (offset>sizeOfPage)
        {
            System.out.println("ERROR: offset is not valid");
            pw.println("ERROR: offset is not valid");
            return false;
        }
         System.out.println("CORRECT: offset is valid");
         pw.println("CORRECT: offset is valid");
        return true;       
    }

    private static int searchTLB(int page) {
        for(int i =0;i<tlb.length;i++)
        {
            if (tlb[i].logicalAddr == page)
            {
                tlb_counter[i]++;
                return tlb[i].physicalAddr;
            }
        }
        return -1; // not found
    }

    private static void setRefrence(int refrenseIndex, String type) {
        if(type.equals("w"))
        {
            switch(refrence[refrenseIndex])
            {
                case 0 :
                    refrence[refrenseIndex] = 2;
                    
                    break;
                case 1:
                    refrence[refrenseIndex] = 3;
                    break;
                case 2:
                    break;
                case 3:
                    break;
            }
        }
        else//type is r
        {
            switch(refrence[refrenseIndex])
            {
                case 0 :
                    refrence[refrenseIndex] = 1;
                    break;
                case 1:
                    break;
                case 2:
                    refrence[refrenseIndex] = 3;
                    break;
                case 3:
                    break;
            }
        }
        System.out.println("modify bits is: "+ refrence[refrenseIndex] );
        pw.println("modify bits is: "+ refrence[refrenseIndex] );
    }

    private static int updateTLB(int logicalAddr, int physicalAddr)
    {
        for (int i=0;i<tlb_counter.length;i++)
        {
            if(tlb_counter[i] == 0)
            {
                tlb[i].logicalAddr = logicalAddr;
                tlb[i].physicalAddr = physicalAddr;
                System.out.println("put in ("+ logicalAddr+","+physicalAddr+")");
                pw.println("put in ("+ logicalAddr+","+physicalAddr+")");
                tlb_counter[i]++;
                return i;
            }
        }
        //tlb is full
        int freeTlbIndex = Algo.MFU(tlb_counter);
        tlb[freeTlbIndex].logicalAddr = logicalAddr;
        tlb[freeTlbIndex].physicalAddr = physicalAddr;
        System.out.println("replace in ("+ logicalAddr+","+physicalAddr+")");
        pw.println("replace in ("+ logicalAddr+","+physicalAddr+")");
        tlb_counter[freeTlbIndex] = 1;
        return freeTlbIndex;
    }
}
